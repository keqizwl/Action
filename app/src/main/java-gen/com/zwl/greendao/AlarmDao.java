package com.zwl.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALARM".
*/
public class AlarmDao extends AbstractDao<Alarm, Long> {

    public static final String TABLENAME = "ALARM";

    /**
     * Properties of entity Alarm.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Hour = new Property(1, Integer.class, "hour", false, "HOUR");
        public final static Property Minute = new Property(2, Integer.class, "minute", false, "MINUTE");
        public final static Property Open = new Property(3, Boolean.class, "open", false, "OPEN");
    }


    public AlarmDao(DaoConfig config) {
        super(config);
    }
    
    public AlarmDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALARM\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"HOUR\" INTEGER," + // 1: hour
                "\"MINUTE\" INTEGER," + // 2: minute
                "\"OPEN\" INTEGER);"); // 3: open
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALARM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Alarm entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer hour = entity.getHour();
        if (hour != null) {
            stmt.bindLong(2, hour);
        }
 
        Integer minute = entity.getMinute();
        if (minute != null) {
            stmt.bindLong(3, minute);
        }
 
        Boolean open = entity.getOpen();
        if (open != null) {
            stmt.bindLong(4, open ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Alarm entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer hour = entity.getHour();
        if (hour != null) {
            stmt.bindLong(2, hour);
        }
 
        Integer minute = entity.getMinute();
        if (minute != null) {
            stmt.bindLong(3, minute);
        }
 
        Boolean open = entity.getOpen();
        if (open != null) {
            stmt.bindLong(4, open ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Alarm readEntity(Cursor cursor, int offset) {
        Alarm entity = new Alarm( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // hour
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // minute
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0 // open
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Alarm entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHour(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setMinute(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setOpen(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Alarm entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Alarm entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Alarm entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
